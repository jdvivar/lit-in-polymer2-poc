function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){keys.push.apply(keys,Object.getOwnPropertySymbols(object))}if(enumerableOnly)keys=keys.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable});return keys}function _objectSpread(target){for(var i=1,source;i<arguments.length;i++){source=null!=arguments[i]?arguments[i]:{};if(i%2){ownKeys(source,!0).forEach(function(key){babelHelpers.defineProperty(target,key,source[key])})}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source))}else{ownKeys(source).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))})}}return target}/* global ShadyCSS */import{dedupeMixin}from"./dedupeMixin.js";import{DomHelpersMixin}from"./DomHelpersMixin.js";/**
 * @deprecated please apply DomHelpersMixin and UpdateStylesMixin if needed yourself
 */export const ElementMixin=dedupeMixin(superclass=>// eslint-disable-next-line no-shadow
class ElementMixin extends DomHelpersMixin(superclass){/**
       * @example
       * <my-element>
       *     <style>
       *         :host {
       *          color: var(--foo);
       *         }
       *     </style>
       * </my-element>
       *
       * $0.updateStyles({'background': 'orange', '--foo': '#fff'})
       * Chrome, Firefox: <my-element style="background: orange; --foo: bar;">
       * IE: <my-element>
       *     => to head: <style>color: #fff</style>
       *
       * @param {Object} updateStyles
       */updateStyles(updateStyles){const styleString=this.getAttribute("style")||this.getAttribute("data-style")||"",currentStyles=styleString.split(";").reduce((acc,stylePair)=>{const parts=stylePair.split(":");if(2===parts.length){/* eslint-disable-next-line prefer-destructuring */acc[parts[0]]=parts[1]}return acc},{}),newStyles=_objectSpread({},currentStyles,{},updateStyles);let newStylesString="";if("object"===typeof ShadyCSS&&!ShadyCSS.nativeShadow){// No ShadowDOM => IE, Edge
const newCssVariablesObj={};Object.keys(newStyles).forEach(key=>{if(-1===key.indexOf("--")){newStylesString+=`${key}:${newStyles[key]};`}else{newCssVariablesObj[key]=newStyles[key]}});this.setAttribute("style",newStylesString);ShadyCSS.styleSubtree(this,newCssVariablesObj)}else{// has shadowdom => Chrome, Firefox, Safari
Object.keys(newStyles).forEach(key=>{newStylesString+=`${key}: ${newStyles[key]};`});this.setAttribute("style",newStylesString)}}});