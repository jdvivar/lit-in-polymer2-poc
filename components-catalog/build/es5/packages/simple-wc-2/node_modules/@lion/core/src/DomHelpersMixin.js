define(["exports","./dedupeMixin.js"],function(_exports,_dedupeMixin){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0});_exports.DomHelpersMixin=void 0;/**
 *
 * @returns {{$id: {}, $name: {}, $$id: {}, $$slot: {}}}
 */function generateEmptyCache(){return{$id:{},$name:{},$$id:{},$$slot:{}}}/**
 * # DomHelpersMixin
 * `DomHelpersMixin` provides access to element in shadow and light DOM with "id" attribute,
 * it provides access to element in shadow DOM with "name" attribute and
 * provides access to element in Light DOM with "slot" attribute.
 * It memorizes element reference in cache and can be removed from cache
 * (individually or completely) via _clearDomCache().
 *
 * @example
 * this.$id('foo') to access the element with the id 'foo' in shadow DOM
 * this.$name('foo') to access the element with name 'foo' in shadow DOM
 * this.$$id('foo') to access the element with the id 'foo' when not in shadow DOM
 * this.$$slot('foo') to access the element with the slot 'foo' when in light DOM
 *
 * @type {function()}
 * @polymerMixin
 * @mixinFunction
 */var DomHelpersMixin=(0,_dedupeMixin.dedupeMixin)(function(superclass){return(/*#__PURE__*/ // eslint-disable-next-line
function(_superclass){babelHelpers.inherits(DomHelpersMixin,_superclass);function DomHelpersMixin(){var _this;babelHelpers.classCallCheck(this,DomHelpersMixin);_this=babelHelpers.possibleConstructorReturn(this,babelHelpers.getPrototypeOf(DomHelpersMixin).call(this));_this.__domHelpersCache=generateEmptyCache();return _this}/**
       * To access an element with the id 'foo' in shadow DOM
       *
       * @param {number} id
       * @returns {*|undefined}
       */babelHelpers.createClass(DomHelpersMixin,[{key:"$id",value:function $id(id){var element=this.__domHelpersCache.$id[id];if(!element){element=this.shadowRoot.getElementById(id);this.__domHelpersCache.$id[id]=element}return element||void 0}/**
       * Provides access to the named slot node in shadow DOM for this name
       *
       * @param {string} name
       * @returns {*|undefined}
       */},{key:"$name",value:function $name(name){var element=this.__domHelpersCache.$name[name];if(!element){element=this.shadowRoot.querySelector("[name=\"".concat(name,"\"]"));this.__domHelpersCache.$name[name]=element}return element||void 0}/**
       * To access an element with the id 'foo' in light DOM
       *
       * **Deprecated**: LightDom may change underneath you - you should not cache it
       *
       * @deprecated
       * @param {number} id
       * @returns {*|undefined}
       */},{key:"$$id",value:function $$id(id){var element=this.__domHelpersCache.$$id[id];if(!element){element=this.querySelector("#".concat(id));this.__domHelpersCache.$$id[id]=element}return element||void 0}/**
       * To access the element with the slot 'foo' when in light DOM
       *
       * **Deprecated**: LightDom may change underneath you - you should not cache it
       *
       * @deprecated
       * @param {string} slot
       * @returns {*|undefined}
       */},{key:"$$slot",value:function $$slot(slot){var element=this.__domHelpersCache.$$slot[slot];if(!element){element=Array.from(this.children).find(function(child){return child.slot===slot});this.__domHelpersCache.$$slot[slot]=element}return element||void 0}/**
       * Remove from cache (individually or completely) via _clearDomCache()
       *
       * @param {string} type
       * @param {number} id
       * @private
       */},{key:"_clearDomCache",value:function _clearDomCache(type,id){if(type){this.__domHelpersCache[type][id]=void 0}else{this.__domHelpersCache=generateEmptyCache()}}}]);return DomHelpersMixin}(superclass))});_exports.DomHelpersMixin=DomHelpersMixin});