define(["exports"],function(_exports){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0});_exports.LionSingleton=void 0;/**
 * 'LionSingleton' provides an instance of the given class via .getInstance(foo, bar) and will
 * return the same instance if already created. It can reset its instance so a new one will be
 * created via .resetInstance() and can at any time add mixins via .addInstanceMixin().
 * It can provide new instances (with applied Mixins) via .getNewInstance().
 */var LionSingleton=/*#__PURE__*/function(){function LionSingleton(){babelHelpers.classCallCheck(this,LionSingleton)}babelHelpers.createClass(LionSingleton,null,[{key:"addInstanceMixin",/**
   * @param {function()} mixin
   */value:function addInstanceMixin(mixin){if(!this.__instanceMixins){this.__instanceMixins=[]}this.__instanceMixins.push(mixin)}/**
   * @param {...*} args
   * @returns {LionSingleton}
   */},{key:"getNewInstance",value:function getNewInstance(){var Klass=this;if(Array.isArray(this.__instanceMixins)){this.__instanceMixins.forEach(function(mixin){Klass=mixin(Klass)})}for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key]}return babelHelpers.construct(Klass,args)}/**
   * @param {...*} args
   * @returns {*}
   */},{key:"getInstance",value:function getInstance(){if(this.__instance){return this.__instance}this.__instance=this.getNewInstance.apply(this,arguments);return this.__instance}},{key:"resetInstance",value:function resetInstance(){this.__instance=void 0}}]);return LionSingleton}();_exports.LionSingleton=LionSingleton});