define(["exports","../lib/parts.js","../lit-html.js"],function(_exports,_parts,_litHtml){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0});_exports.until=void 0;/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */var _state=new WeakMap,_infinity=2147483647,until=(0,_litHtml.directive)(function(){for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key]}return function(part){var state=_state.get(part);if(state===void 0){state={lastRenderedIndex:_infinity,values:[]};_state.set(part,state)}var previousValues=state.values,previousLength=previousValues.length;state.values=args;var _loop2=function _loop2(i){// If we've rendered a higher-priority value already, stop.
if(i>state.lastRenderedIndex){return"break"}var value=args[i];// Render non-Promise values immediately
if((0,_parts.isPrimitive)(value)||"function"!==typeof value.then){part.setValue(value);state.lastRenderedIndex=i;// Since a lower-priority value will never overwrite a higher-priority
// synchronous value, we can stop processsing now.
return"break"}// If this is a Promise we've already handled, skip it.
if(i<previousLength&&value===previousValues[i]){return"continue"}// We have a Promise that we haven't seen before, so priorities may have
// changed. Forget what we rendered before.
state.lastRenderedIndex=_infinity;previousLength=0;Promise.resolve(value).then(function(resolvedValue){var index=state.values.indexOf(value);// If state.values doesn't contain the value, we've re-rendered without
// the value, so don't render it. Then, only render if the value is
// higher-priority than what's already been rendered.
if(-1<index&&index<state.lastRenderedIndex){state.lastRenderedIndex=index;part.setValue(resolvedValue);part.commit()}})};_loop:for(var i=0,_ret;i<args.length;i++){_ret=_loop2(i);switch(_ret){case"break":break _loop;case"continue":continue;}}}});// Effectively infinity, but a SMI.
_exports.until=until});